<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 이름은 SQL을 찾을 때 사용하는 그룹명이다.
     따라서 SQL 문을 사용하는 DAO 클래스 이름과 같게 하면
     유지보수할 때 알아보기 쉽다.
     단순히 알아보기 쉬울 뿐만 아니라 
     스프링 프레임워크와 연동할 때 DAO 객체를 자동 생성할 수 있다. 
-->
<mapper namespace="challenge.dao.ChallengeDao">
  <resultMap type="Challenge" id="ChallengeMap">
    <id column="chno" property="no"/>
    <result column="chtitl" property="title"/>
    <result column="chcont" property="content"/>
    <result column="chpath" property="path"/>
  </resultMap>
  
  
  <!-- SQL 문 id를 설정할 때 SQL문을 사용하는 메서드 이름과 같게하면
       유지보수할 때 알아보기 쉽다. 
       알아보기 쉬울 뿐만 아니라
       스프링 프레임워크와 연동할 때 DAO객체를 자동생성하고 
       그 메서드를 자동생성할 때 사용할 수 있다.
  -->
  <select id="selectList" 
          resultMap="ChallengeMap" 
          parameterType="map">
    select chno, chtitl, chcont, chpath
    from CHAL
  </select>
  <select id="mainList" 
          resultMap="ChallengeMap" 
          parameterType="map">
          select * from CHAL
          limit 0,2
    
  </select>
  
  <insert id="insert" parameterType="Challenge"
          useGeneratedKeys="true" keyColumn="chno" keyProperty="no">
    insert into CHAL(chtitl, chcont, chpath) 
        values (#{title}, #{content}, 0)
  </insert>
  
  <select id="selectOne" parameterType="int" resultMap="ChallengeMap">
    select chtitl, chcont, chpath 
    from CHAL
    where chno=#{no}
  </select>
  
 <!--  <update id="update" parameterType="Challenge">
    update POST set 
        pocont=#{content}, 
        podate=now()
    where pono=#{no}
  </update>
  
  <delete id="delete" parameterType="int">
    delete from POST where pono=#{value}
  </delete> -->
</mapper>