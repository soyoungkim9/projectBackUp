<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 이름은 SQL을 찾을 때 사용하는 그룹명이다.
     따라서 SQL 문을 사용하는 DAO 클래스 이름과 같게 하면
     유지보수할 때 알아보기 쉽다.
     단순히 알아보기 쉬울 뿐만 아니라
     스프링 프레임워크와 연동할 때 DAO 객체를 자동 생성할 수 있다.
-->
<mapper namespace="challenge.dao.ProgramMemberDao">
  <resultMap type="Member" id="MemberMap">
    <id column="uno" property="userNo"/>
    <result column="mail" property="email"/>
    <result column="uname" property="name"/>
    <result column="upath" property="userPath"/>
    <collection property="programs" ofType="Program">
        <id column="pno" property="no"/>
        <result column="pname" property="name"/>
        <result column="pth" property="proTh"/>
        <result column="ptover" property="proTurn"/>
    </collection>
  </resultMap>

  <resultMap type="ProgramMember" id="ProgramMemberMap">
    <id column="pno" property="programNo"/>
    <id column="uno" property="userNo"/>
    <result column="payday" property="paymentDay"/>
    
    <association property="program" javaType="Program">
        <id column="pno" property="no"/>
        <result column="pname" property="name"/>
	    <result column="sdt" property="startDate"/>
	    <result column="edt" property="endDate"/>
	    <result column="pgoal" property="proGoal"/>
	    <result column="pgoal_n" property="proGoalNum"/>
        <result column="trnno" property="trainerNo"/>
    </association>
    <association property="user" javaType="User">
        <id column="uno" property="userNo"/>
        <result column="mail" property="email"/>
        <result column="uname" property="name"/>
        <result column="sex" property="sex"/>
        <result column="uphon" property="userPhone"/>
    </association>
    <collection property="diarys" ofType="Diary">
        <id column="dno" property="dno"/>
        <result column="dchek" property="dcheck"/>
    </collection>
  </resultMap>

  <!-- SQL 문 id를 설정할 때 SQL문을 사용하는 메서드 이름과 같게하면
       유지보수할 때 알아보기 쉽다.
       알아보기 쉬울 뿐만 아니라
       스프링 프레임워크와 연동할 때 DAO객체를 자동생성하고
       그 메서드를 자동생성할 때 사용할 수 있다.
  -->
  <insert id="insert" parameterType="ProgramMember">
    insert into PMEMB(pno,uno,payday) 
    values(#{pno},#{uno},now())
    
   </insert>
   
  <select id="pNameList" parameterType="int" resultMap="ProgramMemberMap">
  	SELECT p.pno, p.trnno, p.pname
	FROM PROG p 
    WHERE p.trnno = #{value}
  </select>
  
  <select id="selectList" parameterType="int" resultMap="ProgramMemberMap">
	SELECT u.uno, p.pno, pm.uno, u.mail, u.uname, u.sex, p.pname, p.trnno
	FROM PMEMB pm 
		INNER JOIN USER u 
	    ON pm.uno = u.uno 
	    INNER JOIN PROG p 
	    ON pm.pno = p.pno
    WHERE p.trnno = #{value}
<!--     order by pono desc -->
  </select>
  
  <select id="selectListWithProgram" parameterType="map" resultMap="ProgramMemberMap">
	SELECT u.uno, p.pno, u.mail, u.uname, u.sex, p.pname 
	FROM PMEMB pm 
		INNER JOIN USER u 
	    ON pm.uno = u.uno 
	    INNER JOIN PROG p 
	    ON pm.pno = p.pno 
	WHERE p.pno = #{arg0}
	AND p.trnno = #{arg1}
  </select>

  <!-- 파라미터의 타입이 primitive type이나 wrapper 클래스, String 클래스인 경우
       값을 꺼낼 때 프로퍼티 이름을 마음대로 해도 된다.
  -->
  <select id="selectOne" parameterType="map" resultMap="ProgramMemberMap">
	SELECT u.uno, u.utype, u.uname, u.uphon, u.sex, p.pno, p.pname, p.sdt, p.edt, p.pgoal
	FROM PMEMB pm
		INNER JOIN USER u
		ON pm.uno = u.uno
	    INNER JOIN PROG p
		ON pm.pno = p.pno
	WHERE u.uno = #{arg0}
	AND p.pno = #{arg1}
  </select>
  
  <!-- 출석률 합 js파일에서 목표가 출석일 경우 회차랑 나눠서 출석률 평균 나타낼 것임 -->
  <!-- 보류 한 mapper에 여러개 dao 연결 가능한지 알아보기 
  <select id="selectListWithDcheck" parameterType="map" resultMap="ProgramMemberMap">
	  SELECT u.uno, p.pno, d.dno, SUM(d.dchek)
	  FROM PMEMB pm
		INNER JOIN USER u
		ON pm.uno = u.uno
	    INNER JOIN PROG p
		ON pm.pno = p.pno
	    INNER JOIN DIARY d
		ON pm.uno = d.uno
	  WHERE u.uno = #{arg0}
	  AND p.trnno = #{arg1}
  </select>
  -->
  <!-- 목표달성률 구할 때 사용 제어는 js에서 목표/실적*100, 마지막bno 처음 bno기준 -->
  <!-- 보류 한 mapper에 여러개 dao 연결 가능한지 알아보기
  <select id="selectListWithGoal" parameterType="map" resultMap="ProgramMemberMap">
	  SELECT DISTINCT u.uno, b.bno, b.bdate, b.weight, b.muscle, b.fat, p.pno
		FROM USER u
		INNER JOIN MEMB m
	    INNER JOIN BINFO b
	    INNER JOIN PMEMB p
		WHERE u.uno = #{arg0}
	    AND p.pno = #{arg1}
  </select>
  -->
  <select id="selectListWithUno" parameterType="int" resultMap="MemberMap">  
    select u.uno, u.uname, u.mail, u.upath, pm.uno, pm.pno, pm.ptype, p.pname, p.pth, p.ptover
	from USER u
	left outer join PMEMB pm on u.uno = pm.uno
	left outer join PROG p on pm.pno = p.pno
    where u.uno = #{value};
  </select>

  
</mapper>
